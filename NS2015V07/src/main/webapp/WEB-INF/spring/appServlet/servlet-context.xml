<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/mvc 		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 	http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop 		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context 	http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security 	http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/tx 		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
		>

	<!-- Enables the Spring MVC @Controller -->
	<annotation-driven />

	<context:component-scan base-package="com.ns.spring" />

	<!-- AOP -->
	<aop:aspectj-autoproxy>
		<aop:include name="aopBefore" />
		<aop:include name="aopAfter" />
		<aop:include name="aopAround" />		
	</aop:aspectj-autoproxy>

	<!-- "id": Unique ID used by programs to identify the class. Unlike "name"  -->
	<!--       it cannot be more than one reference from the same Java object   -->
	<!-- "prototype": New instance each time when called                        -->
	<!-- "singleton": Single instance per Spring IoC container                  -->
	<beans:bean id="aopBefore"  class="com.ns.spring.aop.advise.AspectBefore" scope="prototype"/>
	<beans:bean id="aopAfter"   class="com.ns.spring.aop.advise.AspectAfter"  scope="prototype"/>
	<beans:bean id="aopAround"  class="com.ns.spring.aop.advise.AspectAround" scope="prototype"/>
	
	<!-- Configure Aspect Beans, without this Aspects advices wont execute -->
	<beans:bean name="aopAnnotationAspect" class="com.ns.spring.aop.AopAnnotationAspect" />
	<beans:bean name="aopByXmlConfig"  class="com.ns.spring.aop.advise.AopByXmlConfig" />
	<!-- Configure Beans for AOP -->
	<beans:bean name="rmaController"  class="com.ns.spring.RmaController" />
		
	<beans:bean name="aopTest" class="com.ns.spring.aop.test.AopTest">
		<beans:property name="name" value="Test123"></beans:property>
	</beans:bean>

	<!-- Configure EmployeeService bean -->
	<!-- "ref": Referencing a different bean (could be in a different XML file)    -->
	<beans:bean name="aopTestService" class="com.ns.spring.aop.test.AopTestService" scope="prototype">
		<beans:property name="aopTest" ref="aopTest"></beans:property>
	</beans:bean>

	<!-- AOP Config by XML-->
	<aop:config>
		<aop:aspect ref="aopByXmlConfig" id="aspectXMLConfigID" order="1">
			<aop:pointcut expression="execution(* com.ns.spring.aop.test.AopTest.getName())" id="getNamePointcut"/>
			<aop:around method="aopAroundAdvice" pointcut-ref="getNamePointcut" arg-names="proceedingJoinPoint"/>
		</aop:aspect>
	</aop:config>

	<!-- "prototype": New instance each time when called       -->
	<!-- "singleton": Single instance per Spring IoC container -->
	<!--
	<beans:bean id="rmaDAO" class="com.ns.spring.dao.RmaDAOImpl" scope="prototype">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	 -->
	<!-- scope="prototype" or "singleton" 
	<beans:bean id="rmaService" class="com.ns.spring.service.RmaServiceImpl" scope="prototype">
		<beans:property name="rmaDAO" ref="rmaDAO"></beans:property>
	</beans:bean>
	-->

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<beans:bean id="dataSource" 
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url"      value="jdbc:mysql://localhost:3306/ns201501" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="nobu" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.ns.spring.model.RMA_HDR</beans:value>
				<beans:value>com.ns.spring.model.RMA_LINE</beans:value>
				<beans:value>com.ns.spring.model.RTRN_TP</beans:value>
				<beans:value>com.ns.spring.model.RTRN_RSN</beans:value>
				<beans:value>com.ns.spring.model.RTRN_TP_RSN</beans:value>
				<beans:value>com.ns.spring.model.RTRN_TP_RSN_CMBN</beans:value>
				<beans:value>com.ns.spring.model.RMA_HDR_STS</beans:value>
				<beans:value>com.ns.spring.model.MDSE</beans:value>
				<beans:value>com.ns.spring.model.RmaLinePk</beans:value>
				<beans:value>com.ns.spring.model.RtrnTpRsnPk</beans:value>								
				<beans:value>com.ns.spring.model.ui.RmaHdrModel</beans:value>
				<beans:value>com.ns.spring.model.ui.RmaHdrStsModel</beans:value>
				<beans:value>com.ns.spring.model.ui.RmaLineModel</beans:value>
				<beans:value>com.ns.spring.model.ui.RtrnRsnModel</beans:value>
				<beans:value>com.ns.spring.model.ui.RtrnTpModel</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	<!-- 
	<beans:bean id="rmaDAO" class="com.ns.spring.dao.RmaDAOImpl" scope="prototype">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	 -->
	<!-- scope="prototype" or "singleton" 
	<beans:bean id="rmaService" class="com.ns.spring.service.RmaServiceImpl" scope="prototype">
		<beans:property name="rmaDAO" ref="rmaDAO"></beans:property>
	</beans:bean>
	-->
	<!-- 20150423 START 
	<beans:bean id="genHbDao" class="com.ns.spring.dao.GenHbDaoImpl" scope="prototype">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	-->
	<!-- scope="prototype" or "singleton" 
	<beans:bean id="genHdrSvc" class="com.ns.spring.service.GenHbServiceImpl" scope="prototype">
		<beans:property name="genHbDao" ref="genHbDao"></beans:property>
	</beans:bean>
	-->
	<!-- 20150423 END -->


</beans:beans>
